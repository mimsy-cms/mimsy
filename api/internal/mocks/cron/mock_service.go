// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cron/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cron "github.com/mimsy-cms/mimsy/internal/cron"
)

// MockCronService is a mock of CronService interface.
type MockCronService struct {
	ctrl     *gomock.Controller
	recorder *MockCronServiceMockRecorder
}

// MockCronServiceMockRecorder is the mock recorder for MockCronService.
type MockCronServiceMockRecorder struct {
	mock *MockCronService
}

// NewMockCronService creates a new mock instance.
func NewMockCronService(ctrl *gomock.Controller) *MockCronService {
	mock := &MockCronService{ctrl: ctrl}
	mock.recorder = &MockCronServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronService) EXPECT() *MockCronServiceMockRecorder {
	return m.recorder
}

// GetJobStatuses mocks base method.
func (m *MockCronService) GetJobStatuses(ctx context.Context) ([]cron.JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobStatuses", ctx)
	ret0, _ := ret[0].([]cron.JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobStatuses indicates an expected call of GetJobStatuses.
func (mr *MockCronServiceMockRecorder) GetJobStatuses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStatuses", reflect.TypeOf((*MockCronService)(nil).GetJobStatuses), ctx)
}

// ListJobs mocks base method.
func (m *MockCronService) ListJobs(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockCronServiceMockRecorder) ListJobs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockCronService)(nil).ListJobs), ctx)
}

// RegisterJob mocks base method.
func (m *MockCronService) RegisterJob(ctx context.Context, job cron.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterJob", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterJob indicates an expected call of RegisterJob.
func (mr *MockCronServiceMockRecorder) RegisterJob(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterJob", reflect.TypeOf((*MockCronService)(nil).RegisterJob), ctx, job)
}

// RemoveJob mocks base method.
func (m *MockCronService) RemoveJob(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveJob", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveJob indicates an expected call of RemoveJob.
func (mr *MockCronServiceMockRecorder) RemoveJob(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveJob", reflect.TypeOf((*MockCronService)(nil).RemoveJob), ctx, name)
}

// RunJobNow mocks base method.
func (m *MockCronService) RunJobNow(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunJobNow", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunJobNow indicates an expected call of RunJobNow.
func (mr *MockCronServiceMockRecorder) RunJobNow(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunJobNow", reflect.TypeOf((*MockCronService)(nil).RunJobNow), ctx, name)
}

// Start mocks base method.
func (m *MockCronService) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCronServiceMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronService)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockCronService) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockCronServiceMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCronService)(nil).Stop), ctx)
}
