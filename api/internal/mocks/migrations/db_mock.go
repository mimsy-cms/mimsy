// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/migrations/db.go
//
// Generated by this command:
//
//	mockgen -source=internal/interfaces/migrations/db.go -destination=internal/mocks/migrations/db_mock.go -package=migrations
//

// Package migrations is a generated GoMock package.
package migrations

import (
	context "context"
	fs "io/fs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	migrations_interface "github.com/mimsy-cms/mimsy/internal/interfaces/migrations"
	backfill "github.com/xataio/pgroll/pkg/backfill"
	migrations "github.com/xataio/pgroll/pkg/migrations"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
	isgomock struct{}
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// IsActiveMigrationPeriod mocks base method.
func (m *MockState) IsActiveMigrationPeriod(ctx context.Context, schema string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActiveMigrationPeriod", ctx, schema)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActiveMigrationPeriod indicates an expected call of IsActiveMigrationPeriod.
func (mr *MockStateMockRecorder) IsActiveMigrationPeriod(ctx, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveMigrationPeriod", reflect.TypeOf((*MockState)(nil).IsActiveMigrationPeriod), ctx, schema)
}

// IsInitialized mocks base method.
func (m *MockState) IsInitialized(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockStateMockRecorder) IsInitialized(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockState)(nil).IsInitialized), ctx)
}

// LatestMigration mocks base method.
func (m *MockState) LatestMigration(ctx context.Context, schema string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestMigration", ctx, schema)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestMigration indicates an expected call of LatestMigration.
func (mr *MockStateMockRecorder) LatestMigration(ctx, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestMigration", reflect.TypeOf((*MockState)(nil).LatestMigration), ctx, schema)
}

// MockMigrator is a mock of Migrator interface.
type MockMigrator struct {
	ctrl     *gomock.Controller
	recorder *MockMigratorMockRecorder
	isgomock struct{}
}

// MockMigratorMockRecorder is the mock recorder for MockMigrator.
type MockMigratorMockRecorder struct {
	mock *MockMigrator
}

// NewMockMigrator creates a new mock instance.
func NewMockMigrator(ctrl *gomock.Controller) *MockMigrator {
	mock := &MockMigrator{ctrl: ctrl}
	mock.recorder = &MockMigratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrator) EXPECT() *MockMigratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMigrator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMigratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMigrator)(nil).Close))
}

// Complete mocks base method.
func (m *MockMigrator) Complete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockMigratorMockRecorder) Complete(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockMigrator)(nil).Complete), ctx)
}

// Schema mocks base method.
func (m *MockMigrator) Schema() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].(string)
	return ret0
}

// Schema indicates an expected call of Schema.
func (mr *MockMigratorMockRecorder) Schema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockMigrator)(nil).Schema))
}

// Start mocks base method.
func (m_2 *MockMigrator) Start(ctx context.Context, m *migrations.Migration, cfg *backfill.Config) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Start", ctx, m, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMigratorMockRecorder) Start(ctx, m, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMigrator)(nil).Start), ctx, m, cfg)
}

// State mocks base method.
func (m *MockMigrator) State() migrations_interface.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(migrations_interface.State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockMigratorMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockMigrator)(nil).State))
}

// UnappliedMigrations mocks base method.
func (m *MockMigrator) UnappliedMigrations(ctx context.Context, f fs.FS) ([]*migrations.RawMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnappliedMigrations", ctx, f)
	ret0, _ := ret[0].([]*migrations.RawMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnappliedMigrations indicates an expected call of UnappliedMigrations.
func (mr *MockMigratorMockRecorder) UnappliedMigrations(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnappliedMigrations", reflect.TypeOf((*MockMigrator)(nil).UnappliedMigrations), ctx, f)
}
