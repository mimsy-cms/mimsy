// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/github_fetcher/fetcher.go
//
// Generated by this command:
//
//	mockgen -source=pkg/github_fetcher/fetcher.go -destination=internal/mocks/github_fetcher/mock_provider.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	zip "archive/zip"
	context "context"
	reflect "reflect"

	github_fetcher "github.com/mimsy-cms/mimsy/pkg/github_fetcher"
	gomock "go.uber.org/mock/gomock"
)

// MockGithubProvider is a mock of GithubProvider interface.
type MockGithubProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGithubProviderMockRecorder
	isgomock struct{}
}

// MockGithubProviderMockRecorder is the mock recorder for MockGithubProvider.
type MockGithubProviderMockRecorder struct {
	mock *MockGithubProvider
}

// NewMockGithubProvider creates a new mock instance.
func NewMockGithubProvider(ctrl *gomock.Controller) *MockGithubProvider {
	mock := &MockGithubProvider{ctrl: ctrl}
	mock.recorder = &MockGithubProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubProvider) EXPECT() *MockGithubProviderMockRecorder {
	return m.recorder
}

// CreateCommitStatus mocks base method.
func (m *MockGithubProvider) CreateCommitStatus(ctx context.Context, repository, commitSHA, state, description, targetURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommitStatus", ctx, repository, commitSHA, state, description, targetURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommitStatus indicates an expected call of CreateCommitStatus.
func (mr *MockGithubProviderMockRecorder) CreateCommitStatus(ctx, repository, commitSHA, state, description, targetURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitStatus", reflect.TypeOf((*MockGithubProvider)(nil).CreateCommitStatus), ctx, repository, commitSHA, state, description, targetURL)
}

// GetContents mocks base method.
func (m *MockGithubProvider) GetContents(ctx context.Context, repository, ref string) (*zip.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", ctx, repository, ref)
	ret0, _ := ret[0].(*zip.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContents indicates an expected call of GetContents.
func (mr *MockGithubProviderMockRecorder) GetContents(ctx, repository, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockGithubProvider)(nil).GetContents), ctx, repository, ref)
}

// GetFileContent mocks base method.
func (m *MockGithubProvider) GetFileContent(ctx context.Context, repository, ref, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContent", ctx, repository, ref, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockGithubProviderMockRecorder) GetFileContent(ctx, repository, ref, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockGithubProvider)(nil).GetFileContent), ctx, repository, ref, path)
}

// GetLastCommit mocks base method.
func (m *MockGithubProvider) GetLastCommit(ctx context.Context, repository string) (*github_fetcher.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommit", ctx, repository)
	ret0, _ := ret[0].(*github_fetcher.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCommit indicates an expected call of GetLastCommit.
func (mr *MockGithubProviderMockRecorder) GetLastCommit(ctx, repository any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommit", reflect.TypeOf((*MockGithubProvider)(nil).GetLastCommit), ctx, repository)
}

// GetRepositoryContents mocks base method.
func (m *MockGithubProvider) GetRepositoryContents(ctx context.Context, repository string) (*github_fetcher.RepositoryContents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryContents", ctx, repository)
	ret0, _ := ret[0].(*github_fetcher.RepositoryContents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryContents indicates an expected call of GetRepositoryContents.
func (mr *MockGithubProviderMockRecorder) GetRepositoryContents(ctx, repository any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryContents", reflect.TypeOf((*MockGithubProvider)(nil).GetRepositoryContents), ctx, repository)
}

// IsInstalled mocks base method.
func (m *MockGithubProvider) IsInstalled(ctx context.Context, repository string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstalled", ctx, repository)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInstalled indicates an expected call of IsInstalled.
func (mr *MockGithubProviderMockRecorder) IsInstalled(ctx, repository any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstalled", reflect.TypeOf((*MockGithubProvider)(nil).IsInstalled), ctx, repository)
}
