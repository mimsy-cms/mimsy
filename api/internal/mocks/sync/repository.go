// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sync/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/sync/repository.go -destination=internal/mocks/sync/repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	sync "github.com/mimsy-cms/mimsy/internal/sync"
	mimsy_schema "github.com/mimsy-cms/mimsy/pkg/mimsy_schema"
)

// MockSyncStatusRepository is a mock of SyncStatusRepository interface.
type MockSyncStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSyncStatusRepositoryMockRecorder
	isgomock struct{}
}

// MockSyncStatusRepositoryMockRecorder is the mock recorder for MockSyncStatusRepository.
type MockSyncStatusRepositoryMockRecorder struct {
	mock *MockSyncStatusRepository
}

// NewMockSyncStatusRepository creates a new mock instance.
func NewMockSyncStatusRepository(ctrl *gomock.Controller) *MockSyncStatusRepository {
	mock := &MockSyncStatusRepository{ctrl: ctrl}
	mock.recorder = &MockSyncStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncStatusRepository) EXPECT() *MockSyncStatusRepositoryMockRecorder {
	return m.recorder
}

// CreateIfNotExists mocks base method.
func (m *MockSyncStatusRepository) CreateIfNotExists(ctx context.Context, repo, commitSha, commitMessage string, commitDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIfNotExists", ctx, repo, commitSha, commitMessage, commitDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIfNotExists indicates an expected call of CreateIfNotExists.
func (mr *MockSyncStatusRepositoryMockRecorder) CreateIfNotExists(ctx, repo, commitSha, commitMessage, commitDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIfNotExists", reflect.TypeOf((*MockSyncStatusRepository)(nil).CreateIfNotExists), ctx, repo, commitSha, commitMessage, commitDate)
}

// GetActiveMigration mocks base method.
func (m *MockSyncStatusRepository) GetActiveMigration(ctx context.Context, repo string) (*sync.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMigration", ctx, repo)
	ret0, _ := ret[0].(*sync.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveMigration indicates an expected call of GetActiveMigration.
func (mr *MockSyncStatusRepositoryMockRecorder) GetActiveMigration(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMigration", reflect.TypeOf((*MockSyncStatusRepository)(nil).GetActiveMigration), ctx, repo)
}

// GetLastSyncedCommit mocks base method.
func (m *MockSyncStatusRepository) GetLastSyncedCommit(ctx context.Context, repo string) (*sync.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSyncedCommit", ctx, repo)
	ret0, _ := ret[0].(*sync.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSyncedCommit indicates an expected call of GetLastSyncedCommit.
func (mr *MockSyncStatusRepositoryMockRecorder) GetLastSyncedCommit(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSyncedCommit", reflect.TypeOf((*MockSyncStatusRepository)(nil).GetLastSyncedCommit), ctx, repo)
}

// GetRecentStatuses mocks base method.
func (m *MockSyncStatusRepository) GetRecentStatuses(ctx context.Context, limit int) ([]sync.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentStatuses", ctx, limit)
	ret0, _ := ret[0].([]sync.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentStatuses indicates an expected call of GetRecentStatuses.
func (mr *MockSyncStatusRepositoryMockRecorder) GetRecentStatuses(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentStatuses", reflect.TypeOf((*MockSyncStatusRepository)(nil).GetRecentStatuses), ctx, limit)
}

// GetStatus mocks base method.
func (m *MockSyncStatusRepository) GetStatus(ctx context.Context, repo string) (*sync.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, repo)
	ret0, _ := ret[0].(*sync.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockSyncStatusRepositoryMockRecorder) GetStatus(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockSyncStatusRepository)(nil).GetStatus), ctx, repo)
}

// MarkAsActive mocks base method.
func (m *MockSyncStatusRepository) MarkAsActive(ctx context.Context, repo, commitSha string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsActive", ctx, repo, commitSha)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsActive indicates an expected call of MarkAsActive.
func (mr *MockSyncStatusRepositoryMockRecorder) MarkAsActive(ctx, repo, commitSha any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsActive", reflect.TypeOf((*MockSyncStatusRepository)(nil).MarkAsActive), ctx, repo, commitSha)
}

// MarkAsSkipped mocks base method.
func (m *MockSyncStatusRepository) MarkAsSkipped(ctx context.Context, repo, commitSha string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSkipped", ctx, repo, commitSha)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSkipped indicates an expected call of MarkAsSkipped.
func (mr *MockSyncStatusRepositoryMockRecorder) MarkAsSkipped(ctx, repo, commitSha any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSkipped", reflect.TypeOf((*MockSyncStatusRepository)(nil).MarkAsSkipped), ctx, repo, commitSha)
}

// MarkError mocks base method.
func (m *MockSyncStatusRepository) MarkError(ctx context.Context, repo, commitSha string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkError", ctx, repo, commitSha, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkError indicates an expected call of MarkError.
func (mr *MockSyncStatusRepositoryMockRecorder) MarkError(ctx, repo, commitSha, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkError", reflect.TypeOf((*MockSyncStatusRepository)(nil).MarkError), ctx, repo, commitSha, err)
}

// SetAppliedMigration mocks base method.
func (m *MockSyncStatusRepository) SetAppliedMigration(ctx context.Context, repo, commitSha string, migration []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppliedMigration", ctx, repo, commitSha, migration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppliedMigration indicates an expected call of SetAppliedMigration.
func (mr *MockSyncStatusRepositoryMockRecorder) SetAppliedMigration(ctx, repo, commitSha, migration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppliedMigration", reflect.TypeOf((*MockSyncStatusRepository)(nil).SetAppliedMigration), ctx, repo, commitSha, migration)
}

// SetManifest mocks base method.
func (m *MockSyncStatusRepository) SetManifest(ctx context.Context, repo, commitSha string, manifest mimsy_schema.Schema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetManifest", ctx, repo, commitSha, manifest)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetManifest indicates an expected call of SetManifest.
func (mr *MockSyncStatusRepositoryMockRecorder) SetManifest(ctx, repo, commitSha, manifest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetManifest", reflect.TypeOf((*MockSyncStatusRepository)(nil).SetManifest), ctx, repo, commitSha, manifest)
}
