// Code generated by MockGen. DO NOT EDIT.
// Source: internal/media/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/media/service.go -destination=internal/mocks/media/mock_service.go -package=mocks MediaService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/mimsy-cms/mimsy/internal/auth"
	media "github.com/mimsy-cms/mimsy/internal/media"
)

// MockMediaService is a mock of MediaService interface.
type MockMediaService struct {
	ctrl     *gomock.Controller
	recorder *MockMediaServiceMockRecorder
	isgomock struct{}
}

// MockMediaServiceMockRecorder is the mock recorder for MockMediaService.
type MockMediaServiceMockRecorder struct {
	mock *MockMediaService
}

// NewMockMediaService creates a new mock instance.
func NewMockMediaService(ctrl *gomock.Controller) *MockMediaService {
	mock := &MockMediaService{ctrl: ctrl}
	mock.recorder = &MockMediaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaService) EXPECT() *MockMediaServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMediaService) Delete(ctx context.Context, arg1 *media.Media) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMediaServiceMockRecorder) Delete(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMediaService)(nil).Delete), ctx, arg1)
}

// FindAll mocks base method.
func (m *MockMediaService) FindAll(ctx context.Context) ([]media.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]media.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMediaServiceMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMediaService)(nil).FindAll), ctx)
}

// GetById mocks base method.
func (m *MockMediaService) GetById(ctx context.Context, id int64) (*media.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*media.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockMediaServiceMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockMediaService)(nil).GetById), ctx, id)
}

// GetTemporaryURL mocks base method.
func (m *MockMediaService) GetTemporaryURL(ctx context.Context, arg1 *media.Media) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryURL", ctx, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryURL indicates an expected call of GetTemporaryURL.
func (mr *MockMediaServiceMockRecorder) GetTemporaryURL(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryURL", reflect.TypeOf((*MockMediaService)(nil).GetTemporaryURL), ctx, arg1)
}

// Upload mocks base method.
func (m *MockMediaService) Upload(ctx context.Context, fileHeader *multipart.FileHeader, contentType string, user *auth.User) (*media.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, fileHeader, contentType, user)
	ret0, _ := ret[0].(*media.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockMediaServiceMockRecorder) Upload(ctx, fileHeader, contentType, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockMediaService)(nil).Upload), ctx, fileHeader, contentType, user)
}
