// Code generated by MockGen. DO NOT EDIT.
// Source: internal/collection/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/collection/repository.go -destination=internal/mocks/collection/mock_repository.go -package=mocks CollectionRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	collection "github.com/mimsy-cms/mimsy/internal/collection"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CollectionExists mocks base method.
func (m *MockRepository) CollectionExists(ctx context.Context, slug string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionExists", ctx, slug)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionExists indicates an expected call of CollectionExists.
func (mr *MockRepositoryMockRecorder) CollectionExists(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionExists", reflect.TypeOf((*MockRepository)(nil).CollectionExists), ctx, slug)
}

// DeleteResource mocks base method.
func (m *MockRepository) DeleteResource(ctx context.Context, resource *collection.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockRepositoryMockRecorder) DeleteResource(ctx, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockRepository)(nil).DeleteResource), ctx, resource)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context, params *collection.FindAllParams) ([]collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, params)
	ret0, _ := ret[0].([]collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx, params)
}

// FindAllGlobals mocks base method.
func (m *MockRepository) FindAllGlobals(ctx context.Context, params *collection.FindAllParams) ([]collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllGlobals", ctx, params)
	ret0, _ := ret[0].([]collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGlobals indicates an expected call of FindAllGlobals.
func (mr *MockRepositoryMockRecorder) FindAllGlobals(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGlobals", reflect.TypeOf((*MockRepository)(nil).FindAllGlobals), ctx, params)
}

// FindBySlug mocks base method.
func (m *MockRepository) FindBySlug(ctx context.Context, slug string) (*collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySlug", ctx, slug)
	ret0, _ := ret[0].(*collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySlug indicates an expected call of FindBySlug.
func (mr *MockRepositoryMockRecorder) FindBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySlug", reflect.TypeOf((*MockRepository)(nil).FindBySlug), ctx, slug)
}

// FindResource mocks base method.
func (m *MockRepository) FindResource(ctx context.Context, arg1 *collection.Collection, slug string) (*collection.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResource", ctx, arg1, slug)
	ret0, _ := ret[0].(*collection.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResource indicates an expected call of FindResource.
func (mr *MockRepositoryMockRecorder) FindResource(ctx, arg1, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResource", reflect.TypeOf((*MockRepository)(nil).FindResource), ctx, arg1, slug)
}

// FindResources mocks base method.
func (m *MockRepository) FindResources(ctx context.Context, arg1 *collection.Collection) ([]collection.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResources", ctx, arg1)
	ret0, _ := ret[0].([]collection.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResources indicates an expected call of FindResources.
func (mr *MockRepositoryMockRecorder) FindResources(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResources", reflect.TypeOf((*MockRepository)(nil).FindResources), ctx, arg1)
}

// FindUserEmail mocks base method.
func (m *MockRepository) FindUserEmail(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserEmail", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserEmail indicates an expected call of FindUserEmail.
func (mr *MockRepositoryMockRecorder) FindUserEmail(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserEmail", reflect.TypeOf((*MockRepository)(nil).FindUserEmail), ctx, id)
}

// UpdateResourceContent mocks base method.
func (m *MockRepository) UpdateResourceContent(ctx context.Context, arg1 *collection.Collection, resourceSlug string, content map[string]any) (*collection.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceContent", ctx, arg1, resourceSlug, content)
	ret0, _ := ret[0].(*collection.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceContent indicates an expected call of UpdateResourceContent.
func (mr *MockRepositoryMockRecorder) UpdateResourceContent(ctx, arg1, resourceSlug, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceContent", reflect.TypeOf((*MockRepository)(nil).UpdateResourceContent), ctx, arg1, resourceSlug, content)
}
