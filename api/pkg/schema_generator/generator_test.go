package schema_generator_test

import (
	"testing"
	"time"

	"github.com/mimsy-cms/mimsy/pkg/mimsy_schema"
	"github.com/mimsy-cms/mimsy/pkg/schema_generator"
	"github.com/mimsy-cms/mimsy/pkg/test_utils"
)

func TestGeneratorSimple(t *testing.T) {
	schema := &mimsy_schema.Schema{
		Collections: []mimsy_schema.Collection{
			{
				Name: "test",
				Schema: map[string]mimsy_schema.SchemaElement{
					"name": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Description: "Test",
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
				},
			},
		},
		GeneratedAt: time.Time{},
	}

	sqlSchema, err := schema_generator.New().GenerateSqlSchema(schema)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
	diff := test_utils.Diff(
		sqlSchema.ToSql(),
		`CREATE TABLE "test" (
	        "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	        "slug" varchar(60) NOT NULL,
			"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
        	"updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"created_by" bigint NOT NULL,
			"updated_by" bigint NOT NULL,
		    "name" varchar NOT NULL,
	        CONSTRAINT pk__test PRIMARY KEY ("id"),
	        CONSTRAINT uq__test__slug UNIQUE ("slug"),
			CONSTRAINT fk__test__created_by__user FOREIGN KEY ("created_by") REFERENCES user ("id"),
			CONSTRAINT fk__test__updated_by__user FOREIGN KEY ("updated_by") REFERENCES user ("id")
        );`,
	)
	if diff != "" {
		t.Fatalf("unexpected schema definition (-want +got):\n%s", diff)
	}
}

func TestGeneratorOneToMany(t *testing.T) {
	schema := &mimsy_schema.Schema{
		Collections: []mimsy_schema.Collection{
			{
				Name: "posts",
				Schema: map[string]mimsy_schema.SchemaElement{
					"title": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"author": {
						Type:      "relation",
						RelatesTo: "test_data",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
				},
			},
		},
		GeneratedAt: time.Time{},
	}

	sqlSchema, err := schema_generator.New().GenerateSqlSchema(schema)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}

	diff := test_utils.Diff(
		sqlSchema.ToSql(),
		`CREATE TABLE "posts" (
			"id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			"slug" varchar(60) NOT NULL,
			"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"created_by" bigint NOT NULL,
			"updated_by" bigint NOT NULL,
			"title" varchar NOT NULL,

			"author_id" bigint NOT NULL,
			"author_slug" varchar GENERATED ALWAYS AS (SELECT slug FROM mimsy_collections."test_data" WHERE id = "author_id") STORED,

	        CONSTRAINT pk__posts PRIMARY KEY ("id"),
	        CONSTRAINT uq__posts__slug UNIQUE ("slug"),
			CONSTRAINT fk__posts__created_by__user FOREIGN KEY ("created_by") REFERENCES user ("id"),
			CONSTRAINT fk__posts__updated_by__user FOREIGN KEY ("updated_by") REFERENCES user ("id"),
	        CONSTRAINT fk__posts__author_id__test_data FOREIGN KEY ("author_id") REFERENCES mimsy_collections."test_data" ("id")
        );`,
	)
	if diff != "" {
		t.Fatalf("unexpected schema definition (-want +got):\n%s", diff)
	}
}

func TestGeneratorOneToManyBuiltin(t *testing.T) {
	schema := &mimsy_schema.Schema{
		Collections: []mimsy_schema.Collection{
			{
				Name: "posts",
				Schema: map[string]mimsy_schema.SchemaElement{
					"title": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"author": {
						Type:      "relation",
						RelatesTo: "<builtins.user>",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
				},
			},
		},
		GeneratedAt: time.Time{},
	}

	sqlSchema, err := schema_generator.New().GenerateSqlSchema(schema)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}

	diff := test_utils.Diff(
		sqlSchema.ToSql(),
		`CREATE TABLE "posts" (
			"id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			"slug" varchar(60) NOT NULL,
			"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"created_by" bigint NOT NULL,
			"updated_by" bigint NOT NULL,
			"title" varchar NOT NULL,

			"author_id" bigint NOT NULL,
			"author_slug" varchar GENERATED ALWAYS AS (SELECT slug FROM mimsy_internal."user" WHERE id = "author_id") STORED,

	        CONSTRAINT pk__posts PRIMARY KEY ("id"),
	        CONSTRAINT uq__posts__slug UNIQUE ("slug"),
			CONSTRAINT fk__posts__created_by__user FOREIGN KEY ("created_by") REFERENCES user ("id"),
			CONSTRAINT fk__posts__updated_by__user FOREIGN KEY ("updated_by") REFERENCES user ("id"),
	        CONSTRAINT fk__posts__author_id__user FOREIGN KEY ("author_id") REFERENCES mimsy_internal."user" ("id")
        );`,
	)
	if diff != "" {
		t.Fatalf("unexpected schema definition (-want +got):\n%s", diff)
	}
}

func TestGeneratorManyToMany(t *testing.T) {
	schema := &mimsy_schema.Schema{
		Collections: []mimsy_schema.Collection{
			{
				Name: "posts",
				Schema: map[string]mimsy_schema.SchemaElement{
					"title": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"tags": {
						Type:      "multi_relation",
						RelatesTo: "tags",
					},
				},
			},
		},
		GeneratedAt: time.Time{},
	}

	sqlSchema, err := schema_generator.New().GenerateSqlSchema(schema)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}

	diff := test_utils.Diff(
		sqlSchema.ToSql(),
		`CREATE TABLE "posts" (
	        "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	        "slug" varchar(60) NOT NULL,
			"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"created_by" bigint NOT NULL,
			"updated_by" bigint NOT NULL,
	        "title" varchar NOT NULL,
	        CONSTRAINT pk__posts PRIMARY KEY ("id"),
	        CONSTRAINT uq__posts__slug UNIQUE ("slug"),
			CONSTRAINT fk__posts__created_by__user FOREIGN KEY ("created_by") REFERENCES user ("id"),
			CONSTRAINT fk__posts__updated_by__user FOREIGN KEY ("updated_by") REFERENCES user ("id")
        );
        CREATE TABLE "posts_tags_relation_tags" (
        	        "posts_id" bigint NOT NULL,
        	        "tags_id" bigint NOT NULL,
        	        "tags_slug" varchar NOT NULL GENERATED ALWAYS AS (SELECT slug FROM mimsy_collections."tags" WHERE id = "tags_id") STORED,
        	        CONSTRAINT pk__posts_tags_relation_tags PRIMARY KEY ("posts_id", "tags_id"),
        	        CONSTRAINT fk__posts_tags_relation_tags__posts_id__posts FOREIGN KEY ("posts_id") REFERENCES mimsy_collections."posts" ("id"),
        	        CONSTRAINT fk__posts_tags_relation_tags__tags_id__tags FOREIGN KEY ("tags_id") REFERENCES mimsy_collections."tags" ("id")
        );`,
	)
	if diff != "" {
		t.Fatalf("unexpected schema definition (-want +got):\n%s", diff)
	}
}

func TestGeneratorManyToManyBuiltins(t *testing.T) {
	schema := &mimsy_schema.Schema{
		Collections: []mimsy_schema.Collection{
			{
				Name: "posts",
				Schema: map[string]mimsy_schema.SchemaElement{
					"title": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"medias": {
						Type:      "multi_relation",
						RelatesTo: "<builtins.media>",
					},
				},
			},
		},
		GeneratedAt: time.Time{},
	}

	sqlSchema, err := schema_generator.New().GenerateSqlSchema(schema)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}

	diff := test_utils.Diff(
		sqlSchema.ToSql(),
		`CREATE TABLE "posts" (
	        "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	        "slug" varchar(60) NOT NULL,
			"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"created_by" bigint NOT NULL,
			"updated_by" bigint NOT NULL,
	        "title" varchar NOT NULL,
	        CONSTRAINT pk__posts PRIMARY KEY ("id"),
	        CONSTRAINT uq__posts__slug UNIQUE ("slug"),
			CONSTRAINT fk__posts__created_by__user FOREIGN KEY ("created_by") REFERENCES user ("id"),
			CONSTRAINT fk__posts__updated_by__user FOREIGN KEY ("updated_by") REFERENCES user ("id")
        );
        CREATE TABLE "posts_medias_relation_media" (
        	        "posts_id" bigint NOT NULL,
        	        "media_id" bigint NOT NULL,
        	        "media_slug" varchar NOT NULL GENERATED ALWAYS AS (SELECT slug FROM mimsy_internal."media" WHERE id = "media_id") STORED,
        	        CONSTRAINT pk__posts_medias_relation_media PRIMARY KEY ("posts_id", "media_id"),
        	        CONSTRAINT fk__posts_medias_relation_media__posts_id__posts FOREIGN KEY ("posts_id") REFERENCES mimsy_collections."posts" ("id"),
        	        CONSTRAINT fk__posts_medias_relation_media__media_id__media FOREIGN KEY ("media_id") REFERENCES mimsy_internal."media" ("id")
        );`,
	)
	if diff != "" {
		t.Fatalf("unexpected schema definition (-want +got):\n%s", diff)
	}
}

func TestGeneratorExample(t *testing.T) {
	schema := &mimsy_schema.Schema{
		Collections: []mimsy_schema.Collection{
			{
				Name: "post",
				Schema: map[string]mimsy_schema.SchemaElement{
					"title": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"content": {
						Type: "rich_text",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"created_at": {
						Type: "created_at",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"author": {
						Type:      "relation",
						RelatesTo: "<builtins.user>",
					},
					"tags": {
						Type:      "multi_relation",
						RelatesTo: "tag",
					},
				},
			},
			{
				Name: "tag",
				Schema: map[string]mimsy_schema.SchemaElement{
					"name": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
				},
			},
		},
		GeneratedAt: time.Time{},
	}

	sqlSchema, err := schema_generator.New().GenerateSqlSchema(schema)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}

	diff := test_utils.Diff(
		sqlSchema.ToSql(),
		`CREATE TABLE "post" (
		    "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
		    "slug" varchar(60) NOT NULL,
			"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"created_by" bigint NOT NULL,
			"updated_by" bigint NOT NULL,
		    "content" jsonb NOT NULL,
		    "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
		    "title" varchar NOT NULL,
		    "author_id" bigint,
		    "author_slug" varchar GENERATED ALWAYS AS (SELECT slug FROM mimsy_internal."user" WHERE id = "author_id") STORED,
		    CONSTRAINT pk__post PRIMARY KEY ("id"),
		    CONSTRAINT uq__post__slug UNIQUE ("slug"),
			CONSTRAINT fk__post__created_by__user FOREIGN KEY ("created_by") REFERENCES user ("id"),
			CONSTRAINT fk__post__updated_by__user FOREIGN KEY ("updated_by") REFERENCES user ("id"),
		    CONSTRAINT fk__post__author_id__user FOREIGN KEY ("author_id") REFERENCES mimsy_internal."user" ("id")
		);
		CREATE TABLE "post_tags_relation_tag" (
		    "post_id" bigint NOT NULL,
		    "tag_id" bigint NOT NULL,
		    "tag_slug" varchar NOT NULL GENERATED ALWAYS AS (SELECT slug FROM mimsy_collections."tag" WHERE id = "tag_id") STORED,
		    CONSTRAINT pk__post_tags_relation_tag PRIMARY KEY ("post_id", "tag_id"),
		    CONSTRAINT fk__post_tags_relation_tag__post_id__post FOREIGN KEY ("post_id") REFERENCES mimsy_collections."post" ("id"),
		    CONSTRAINT fk__post_tags_relation_tag__tag_id__tag FOREIGN KEY ("tag_id") REFERENCES mimsy_collections."tag" ("id")
		);
		CREATE TABLE "tag" (
		    "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
		    "slug" varchar(60) NOT NULL,
			"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
			"created_by" bigint NOT NULL,
			"updated_by" bigint NOT NULL,
		    "name" varchar NOT NULL,
		    CONSTRAINT pk__tag PRIMARY KEY ("id"),
		    CONSTRAINT uq__tag__slug UNIQUE ("slug"),
			CONSTRAINT fk__tag__created_by__user FOREIGN KEY ("created_by") REFERENCES user ("id"),
			CONSTRAINT fk__tag__updated_by__user FOREIGN KEY ("updated_by") REFERENCES user ("id")
		);`,
	)
	if diff != "" {
		t.Fatalf("unexpected schema definition (-want +got):\n%s", diff)
	}
}

func TestGeneratorStableColumnOrdering(t *testing.T) {
	// Create a schema with multiple fields to test ordering stability
	schema := &mimsy_schema.Schema{
		Collections: []mimsy_schema.Collection{
			{
				Name: "products",
				Schema: map[string]mimsy_schema.SchemaElement{
					"name": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"description": {
						Type: "rich_text",
					},
					"subtitle": {
						Type: "string",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"created_at": {
						Type: "created_at",
						Options: &mimsy_schema.SchemaElementOptions{
							Constraints: &mimsy_schema.SchemaElementConstraints{
								Required: true,
							},
						},
					},
					"excerpt": {
						Type: "string",
					},
					"category": {
						Type:      "relation",
						RelatesTo: "categories",
					},
					"tags": {
						Type:      "multi_relation",
						RelatesTo: "tags",
					},
					"status": {
						Type: "string",
					},
					"metadata": {
						Type: "rich_text",
					},
					"summary": {
						Type: "string",
					},
				},
			},
		},
		GeneratedAt: time.Time{},
	}

	// Generate SQL schema multiple times
	generator := schema_generator.New()

	// First generation
	sqlSchema1, err := generator.GenerateSqlSchema(schema)
	if err != nil {
		t.Fatalf("unexpected error on first generation: %v", err)
	}
	sql1 := sqlSchema1.ToSql()

	// Generate multiple times to ensure consistency
	for i := range 10 {
		sqlSchema2, err := generator.GenerateSqlSchema(schema)
		if err != nil {
			t.Fatalf("unexpected error on generation %d: %v", i+2, err)
		}
		sql2 := sqlSchema2.ToSql()

		if sql1 != sql2 {
			diff := test_utils.Diff(sql1, sql2)
			t.Fatalf("Column ordering is not stable on generation %d (-first +current):\n%s", i+2, diff)
		}
	}

	// Verify the expected structure with the actual ordering
	// The ordering appears to be: id, slug, then alphabetical for regular fields,
	// followed by relation fields
	expectedSQL := `CREATE TABLE "products" (
	"id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"slug" varchar(60) NOT NULL,
	"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
	"updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
	"created_by" bigint NOT NULL,
	"updated_by" bigint NOT NULL,
	"created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
	"description" jsonb,
	"excerpt" varchar,
	"metadata" jsonb,
	"name" varchar NOT NULL,
	"status" varchar,
	"subtitle" varchar NOT NULL,
	"summary" varchar,
	"category_id" bigint,
	"category_slug" varchar GENERATED ALWAYS AS (SELECT slug FROM mimsy_collections."categories" WHERE id = "category_id") STORED,
	CONSTRAINT pk__products PRIMARY KEY ("id"),
	CONSTRAINT uq__products__slug UNIQUE ("slug"),
	CONSTRAINT fk__products__created_by__user FOREIGN KEY ("created_by") REFERENCES user ("id"),
	CONSTRAINT fk__products__updated_by__user FOREIGN KEY ("updated_by") REFERENCES user ("id"),
	CONSTRAINT fk__products__category_id__categories FOREIGN KEY ("category_id") REFERENCES mimsy_collections."categories" ("id")
);
CREATE TABLE "products_tags_relation_tags" (
	"products_id" bigint NOT NULL,
	"tags_id" bigint NOT NULL,
	"tags_slug" varchar NOT NULL GENERATED ALWAYS AS (SELECT slug FROM mimsy_collections."tags" WHERE id = "tags_id") STORED,
	CONSTRAINT pk__products_tags_relation_tags PRIMARY KEY ("products_id", "tags_id"),
	CONSTRAINT fk__products_tags_relation_tags__products_id__products FOREIGN KEY ("products_id") REFERENCES mimsy_collections."products" ("id"),
	CONSTRAINT fk__products_tags_relation_tags__tags_id__tags FOREIGN KEY ("tags_id") REFERENCES mimsy_collections."tags" ("id")
);`

	diff := test_utils.Diff(expectedSQL, sql1)
	if diff != "" {
		t.Fatalf("Unexpected SQL structure (-want +got):\n%s", diff)
	}
}
