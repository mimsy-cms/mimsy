package schema_generator_test

import (
	"testing"

	"github.com/lib/pq"
	"github.com/mimsy-cms/mimsy/pkg/schema_generator"
	"github.com/mimsy-cms/mimsy/pkg/test_utils"
)

func TestGenerateColumnBasic(t *testing.T) {
	column := schema_generator.Column{
		Name: "id",
		Type: "bigint",
	}

	diff := test_utils.Diff(column.ToSql(), "\"id\" bigint")
	if diff != "" {
		t.Fatalf("unexpected column definition (-want +got):\n%s", diff)
	}
}

func TestGenerateColumnId(t *testing.T) {
	column := schema_generator.Column{
		Name:         "id",
		Type:         "bigint",
		IsPrimaryKey: true,
	}

	diff := test_utils.Diff(column.ToSql(), "\"id\" bigint GENERATED BY DEFAULT AS IDENTITY")
	if diff != "" {
		t.Fatalf("unexpected column definition (-want +got):\n%s", diff)
	}
}

func TestGenerateColumnNotNull(t *testing.T) {
	column := schema_generator.Column{
		Name:      "name",
		Type:      "varchar(255)",
		IsNotNull: true,
	}

	diff := test_utils.Diff(column.ToSql(), "\"name\" varchar(255) NOT NULL")
	if diff != "" {
		t.Fatalf("unexpected column definition (-want +got):\n%s", diff)
	}
}

func TestGenerateColumnNotNullWithDefault(t *testing.T) {
	column := schema_generator.Column{
		Name:         "name",
		Type:         "varchar(255)",
		IsNotNull:    true,
		DefaultValue: pq.QuoteLiteral("John Doe"),
	}

	diff := test_utils.Diff(column.ToSql(), "\"name\" varchar(255) NOT NULL DEFAULT 'John Doe'")
	if diff != "" {
		t.Fatalf("unexpected column definition (-want +got):\n%s", diff)
	}
}

func TestGeneratedColumn(t *testing.T) {
	column := schema_generator.Column{
		Name:        "id",
		Type:        "bigint",
		GeneratedAs: "SELECT 1",
	}

	diff := test_utils.Diff(column.ToSql(), "\"id\" bigint GENERATED ALWAYS AS (SELECT 1) STORED")
	if diff != "" {
		t.Fatalf("unexpected column definition (-want +got):\n%s", diff)
	}
}

func TestBasicTable(t *testing.T) {
	table := schema_generator.Table{
		Name: "users",
		Columns: []schema_generator.Column{
			{
				Name:         "id",
				Type:         "bigint",
				IsPrimaryKey: true,
			},
			{
				Name:         "name",
				Type:         "varchar(255)",
				IsNotNull:    true,
				DefaultValue: pq.QuoteLiteral("John Doe"),
			},
		},
	}

	diff := test_utils.Diff(
		table.ToSql(),
		`CREATE TABLE "users" (
			"id" bigint GENERATED BY DEFAULT AS IDENTITY,
			"name" varchar(255) NOT NULL DEFAULT 'John Doe'
		);`,
	)
	if diff != "" {
		t.Fatalf("unexpected table definition (-want +got):\n%s", diff)
	}
}
