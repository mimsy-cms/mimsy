package schema_generator

import (
	"fmt"

	"github.com/lib/pq"
)

type Column struct {
	Name         string
	Type         string
	IsPrimaryKey bool
	GeneratedAs  string
	IsNotNull    bool
	DefaultValue string
}

func (c *Column) ToSql() string {
	sql := fmt.Sprintf("%s %s", pq.QuoteIdentifier(c.Name), c.Type)

	if c.IsPrimaryKey {
		sql += " GENERATED BY DEFAULT AS IDENTITY"
	}

	if c.IsNotNull {
		sql += " NOT NULL"
	}

	if c.GeneratedAs != "" {
		sql += fmt.Sprintf(" GENERATED ALWAYS AS (%s) STORED", c.GeneratedAs)
	}

	if c.DefaultValue != "" {
		sql += fmt.Sprintf(" DEFAULT %s", c.DefaultValue)
	}

	return sql
}

type Table struct {
	Name        string
	Columns     []Column
	Constraints []Constraint
}

func (t *Table) ToSql() string {
	sql := fmt.Sprintf("CREATE TABLE %s (\n", pq.QuoteIdentifier(t.Name))

	for i, c := range t.Columns {
		sql += fmt.Sprintf("  %s", c.ToSql())

		if i < len(t.Columns)-1 || len(t.Constraints) > 0 {
			sql += ",\n"
		}
	}

	for i, c := range t.Constraints {
		sql += fmt.Sprintf("  %s", c.ToSql())

		if i < len(t.Constraints)-1 {
			sql += ",\n"
		}
	}

	sql += "\n);"

	return sql
}
